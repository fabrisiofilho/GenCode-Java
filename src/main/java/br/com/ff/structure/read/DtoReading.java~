package br.com.ff.structure.read;

import br.com.ff.models.Entity;
import br.com.ff.structure.write.GeneratorText;
import br.com.ff.structure.write.ImportMap;
import br.com.ff.structure.write.template.Template;
import br.com.ff.structure.write.template.child.DtoTemplate;
import br.com.ff.utils.CreateClassGenerator;

import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class DtoReading {

    public void create(File outputDirectory, String basePackage, List<Entity> entities) {
        for (Entity entity : entities) {
            DtoTemplate template = new DtoTemplate();
            String dtoClass = generateDto(template, basePackage, entity);
            CreateClassGenerator.writeToFile(dtoClass, outputDirectory.getAbsolutePath(), basePackage, template.getClassTemplate(entity.getName()));
        }
    }

    private String generateDto(Template template, String basePackage, Entity entity) {
        String imports = String.join("\n", ImportMap.getImportsByKeys(List.of("lombok")));

        String fields = entity.getFields().stream()
                .map(field -> "private " + field.getType() + " " + field.getName() + ";")
                .collect(Collectors.joining("\n    "));

        Map<String, String> values = Map.of(
            "PACKAGE", basePackage,
            "IMPORTS", imports,
            "CLASS_NAME", template.getClassTemplate(entity.getName()),
            "FIELDS", fields
        );

        return GeneratorText.processTemplate(template, values);
    }
}